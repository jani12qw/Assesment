name: Build_and_Push_Docker_Image

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'

env:
  ECR_REPOSITORY: my-ecr-repo

permissions:
  issues: write
  pull-requests: write
  contents: write
  id-token: write

jobs:
  Docker_build_push:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Fetch tags
      run: git fetch --tags

    - name: Determine latest version
      id: get_version
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        version=${latest_tag#v}
        
        IFS='.' read -r major minor patch <<< "$version"

        new_version="v$major.$minor.$((patch + 1))"

        while git rev-parse "$new_version" >/dev/null 2>&1; do
          patch=$((patch + 1))
          new_version="v$major.$minor.$patch"
        done

        echo "New version: $new_version"
        echo "::set-output name=new_version::$new_version"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ECR_PUSH_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set ECR_REGISTRY
      run: echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}" >> $GITHUB_ENV

    - name: Set IMAGE_TAG
      run: echo "IMAGE_TAG=${{ steps.get_version.outputs.new_version }}" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      working-directory: src
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update deployment image in memory
      run: |
        cd src/manifests
        sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" deployment.yaml
        cat deployment.yaml  # Display the changes

    - name: Configure Git for committing
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Commit and push updated deployment.yaml
      run: |
        cd src/manifests
        git add deployment.yaml
        git commit -m "Update image to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG in deployment.yaml"
        git push origin main

    - name: Create and push a tag with the new version
      run: |
        git tag ${{ steps.get_version.outputs.new_version }}
        git push origin ${{ steps.get_version.outputs.new_version }}
